# -*- coding: utf-8 -*-
"""temp-hosting-ngrok.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dOpIFx0TbG0DuDKAYzQ-MV4eI_2oAx_2
"""

#Testing
!pip install fastapi uvicorn pyngrok

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Any, List
import re
import os

app = FastAPI(title="BFHL API")

# --------- Request Model ---------
class DataRequest(BaseModel):
    data: List[Any]

# --------- Helpers ---------
INT_RE = re.compile(r"^-?\d+$")

def is_integer_string(s: str) -> bool:
    return bool(INT_RE.fullmatch(s))

def normalize_name_to_snake(s: str) -> str:
    s = s.strip().lower()
    s = re.sub(r"[^\w]+", "_", s)
    s = re.sub(r"_+", "_", s).strip("_")
    return s or "john_doe"

# --------- Main Route ---------
@app.post("/bfhl")
async def bfhl(payload: DataRequest):
    data = payload.data

    if not isinstance(data, list):
        raise HTTPException(status_code=400, detail="`data` must be a list")

    even_numbers, odd_numbers, alphabets, special_chars = [], [], [], []
    letters_flat = []
    total_sum = 0

    try:
        for item in data:
            s = str(item)
            if is_integer_string(s):
                num = int(s)
                if num % 2 == 0:
                    even_numbers.append(s)
                else:
                    odd_numbers.append(s)
                total_sum += num
            elif s.isalpha():
                alphabets.append(s.upper())
                letters_flat.extend(list(s))
            else:
                special_chars.append(s)

        # Build concat_string
        reversed_letters = letters_flat[::-1]
        concat_chars = [
            ch.upper() if i % 2 == 0 else ch.lower()
            for i, ch in enumerate(reversed_letters)
        ]
        concat_string = "".join(concat_chars)

        # User details
        FULL_NAME = os.environ.get("FULL_NAME", "john_doe")
        DOB = os.environ.get("DOB", "17091999")
        EMAIL = os.environ.get("EMAIL", "john@xyz.com")
        ROLL = os.environ.get("ROLL_NUMBER", "ABCD123")

        user_id = f"{normalize_name_to_snake(FULL_NAME)}_{DOB}"

        return {
            "is_success": True,
            "user_id": user_id,
            "email": EMAIL,
            "roll_number": ROLL,
            "odd_numbers": odd_numbers,
            "even_numbers": even_numbers,
            "alphabets": alphabets,
            "special_characters": special_chars,
            "sum": str(total_sum),
            "concat_string": concat_string
        }

    except Exception as e:
        return {"is_success": False, "error": str(e)}

# Commented out IPython magic to ensure Python compatibility.
# %%writefile main.py
# 
# 
# 
# 
# from fastapi import FastAPI, HTTPException
# from pydantic import BaseModel
# from typing import Any, List
# import re
# import os
# 
# app = FastAPI(title="BFHL API")
# 
# # --------- Request Model ---------
# class DataRequest(BaseModel):
#     data: List[Any]
# 
# # --------- Helpers ---------
# INT_RE = re.compile(r"^-?\d+$")
# 
# def is_integer_string(s: str) -> bool:
#     return bool(INT_RE.fullmatch(s))
# 
# def normalize_name_to_snake(s: str) -> str:
#     s = s.strip().lower()
#     s = re.sub(r"[^\w]+", "_", s)
#     s = re.sub(r"_+", "_", s).strip("_")
#     return s or "john_doe"
# 
# # --------- Main Route ---------
# @app.post("/bfhl")
# async def bfhl(payload: DataRequest):
#     data = payload.data
# 
#     if not isinstance(data, list):
#         raise HTTPException(status_code=400, detail="`data` must be a list")
# 
#     even_numbers, odd_numbers, alphabets, special_chars = [], [], [], []
#     letters_flat = []
#     total_sum = 0
# 
#     try:
#         for item in data:
#             s = str(item)
#             if is_integer_string(s):
#                 num = int(s)
#                 if num % 2 == 0:
#                     even_numbers.append(s)
#                 else:
#                     odd_numbers.append(s)
#                 total_sum += num
#             elif s.isalpha():
#                 alphabets.append(s.upper())
#                 letters_flat.extend(list(s))
#             else:
#                 special_chars.append(s)
# 
#         # Build concat_string
#         reversed_letters = letters_flat[::-1]
#         concat_chars = [
#             ch.upper() if i % 2 == 0 else ch.lower()
#             for i, ch in enumerate(reversed_letters)
#         ]
#         concat_string = "".join(concat_chars)
# 
#         # User details
#         FULL_NAME = os.environ.get("FULL_NAME", "john_doe")
#         DOB = os.environ.get("DOB", "17091999")
#         EMAIL = os.environ.get("EMAIL", "john@xyz.com")
#         ROLL = os.environ.get("ROLL_NUMBER", "ABCD123")
# 
#         user_id = f"{normalize_name_to_snake(FULL_NAME)}_{DOB}"
# 
#         return {
#             "is_success": True,
#             "user_id": user_id,
#             "email": EMAIL,
#             "roll_number": ROLL,
#             "odd_numbers": odd_numbers,
#             "even_numbers": even_numbers,
#             "alphabets": alphabets,
#             "special_characters": special_chars,
#             "sum": str(total_sum),
#             "concat_string": concat_string
#         }
# 
#     except Exception as e:
#         return {"is_success": False, "error": str(e)}
# 
# 
#

import os
os.environ['FULL_NAME'] = "Full Name"
os.environ['DOB'] = "29082005"
os.environ['EMAIL'] = "anushika@example.com"
os.environ['ROLL_NUMBER'] = "VRM2025"

get_ipython().system_raw("uvicorn main:app --host 0.0.0.0 --port 8000 &")

from pyngrok import ngrok
ngrok.set_auth_token("YOUR-GROK-TOKEN")
public_url = ngrok.connect(8000).public_url
print("Public URL:", public_url + "/bfhl")

import requests

url = "NGROK-URL"   # replace with your ngrok URL
payload = {"data": ["a","1","334","4","R","$"]}
resp = requests.post(url, json=payload)
print(resp.status_code)
print(resp.json())